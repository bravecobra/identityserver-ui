version: '3.4'

services:
  nginx-proxy:
    image: jwilder/nginx-proxy
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./compose/nginx/vhost.d:/etc/nginx/vhost.d
      - ./compose/nginx/certs:/etc/nginx/certs:ro
      #- ./compose/nginx/nginx.tmpl:/etc/nginx/nginx.tmpl:ro
      #- ./compose/nginx/conf.d:/etc/nginx/conf.d:ro
      #- ./compose/nginx/html:/usr/share/nginx/html:ro
    networks:
      proxy: null
      identityserverui:
          aliases:
            - sts.localhost.com
            - api.localhost.com
            - jsclient.localhost.com
            - mvcclient.localhost.com
    restart: always
  sqlserverdb:
    image: microsoft/mssql-server-linux:latest
    environment:
      SA_PASSWORD: "${DB_PASSWORD:-Password_123}"
      ACCEPT_EULA: "Y"
    container_name: "sqlserverdb"
    networks:
      identityserverui: null
    volumes:
      - mssql-server-linux-data:/var/opt/mssql/data
    ports:
      - "1433:1433"
  # postgresdb:
  #   image: "postgres"
  #   container_name: "postgresdb"
  #   environment:
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=postgres
  #     - POSTGRES_DB=identityserverui
  #   networks:
  #     identityserverui: null
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgresdb:/var/lib/postgresql/data
  sts:
    image: ${DOCKER_REGISTRY-}identityserversts
    container_name: "sts"
    command: dotnet IdentityServerSts.dll /seed
    build:
      context: .
      dockerfile: src/IdentityServerSts/Dockerfile
    depends_on:
      - sqlserverdb
    environment:
      - VIRTUAL_HOST=sts.localhost.com
      - Auth__AllowCORS__0=https://jsclient.localhost.com
      - IdentityServer__IssuerUri=https://sts.localhost.com
      - IdentityServer__PublicOrigin=https://sts.localhost.com
    volumes:
      - ./compose/nginx/certs/cacerts.crt:/usr/local/share/ca-certificates/cacerts.crt
      - ./compose/sts/SeedData.json:/app/SeedData.json
      - ${APPDATA}\Microsoft\UserSecrets:/root/.microsoft/usersecrets:ro
    networks:
      identityserverui: null
  api:
    image: ${DOCKER_REGISTRY-}api
    container_name: "api"
    build:
      context: .
      dockerfile: src/Api/Dockerfile
    networks:
      identityserverui: null
    depends_on:
      - sts
    environment:
      - VIRTUAL_HOST=api.localhost.com
      - Auth__Authority=https://sts.localhost.com
      - Auth__AllowCORS__0=https://jsclient.localhost.com
    volumes:
      - ./compose/nginx/certs/cacerts.crt:/usr/local/share/ca-certificates/cacerts.crt
  jsclient:
    image: ${DOCKER_REGISTRY-}jsclient
    container_name: "jsclient"
    build:
      context: .
      dockerfile: src/JavaScriptClient/Dockerfile
    networks:
      identityserverui: null
    depends_on:
      - sts
    environment:
      - VIRTUAL_HOST=jsclient.localhost.com
      - Auth__Authority=https://sts.localhost.com
  mvcclient:
    image: ${DOCKER_REGISTRY-}mvcclient
    container_name: "mvcclient"
    build:
      context: .
      dockerfile: src/MVCClient/Dockerfile
    cap_add:
      - NET_ADMIN
    depends_on:
      - sts
    networks:
      identityserverui: null
    environment:
      - VIRTUAL_HOST=mvcclient.localhost.com
      - Auth__Authority=https://sts.localhost.com
      - Auth__RedirectUri=https://mvcclient.localhost.com/signin-oidc
      - Api1__Uri=https://api.localhost.com
    volumes:
      - ./compose/nginx/certs/cacerts.crt:/usr/local/share/ca-certificates/cacerts.crt

networks:
  proxy:
    driver: bridge
  identityserverui:
    driver: bridge

volumes:
  mssql-server-linux-data:
    driver: local
  # postgresdb:
  #   driver: local
